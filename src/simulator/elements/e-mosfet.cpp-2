/***************************************************************************
 *   Copyright (C) 2016 by santiago Gonz√°lez                               *
 *   santigoro@gmail.com                                                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, see <http://www.gnu.org/licenses/>.  *
 *                                                                         *
 ***************************************************************************/

#include <math.h>   // fabs(x,y)

#include "e-mosfet.h"
#include "simulator.h"
#include <QDebug>


eMosfet::eMosfet( std::string id )
    : eResistor( id )
{
    m_Pchannel = false;
    
    m_resist = high_imp;
    m_RDSon  = 10;
    m_threshold   = 3;
    
    m_DScurrent = cero_doub;
    m_lastGateV = cero_doub;
    
    m_converged = true;
    
    m_ePin.resize(3);
}
eMosfet::~eMosfet(){}

void eMosfet::initialize()
{
    m_DScurrent = 0;
    m_lastGateV = 0;
    m_lastAdmit = 0;
    m_kRDSon = m_RDSon*(10-m_threshold);
    m_Gth = m_threshold-m_threshold/4;
    
    m_converged = true;
    
    if( (m_ePin[0]->isConnected()) 
      & (m_ePin[1]->isConnected())
      & (m_ePin[2]->isConnected()) ) 
    {
        m_ePin[0]->getEnode()->addToNoLinList(this);
        m_ePin[1]->getEnode()->addToNoLinList(this);
        m_ePin[2]->getEnode()->addToNoLinList(this);
    }
    eResistor::initialize();
}

void eMosfet::setVChanged()
{
    double Vgs;
    double Vds;
    double Vd = m_ePin[0]->getVolt();
    double Vs = m_ePin[1]->getVolt();
    double Vg = m_ePin[2]->getVolt();
    if( m_Pchannel )
    {
        Vgs = Vs-Vg;
        Vds = Vs-Vd;
    }
    else
    {
        Vgs = Vg-Vs;
        Vds = Vd-Vs;
    }
    double dVs    = Vs- m_Vs;
    double GateV  = Vgs - m_Gth;
    double dGateV = fabs(m_lastGateV-GateV); // Input diff with last step
    double Admit  = GateV/m_kRDSon;
    
    if( Admit > high_imp  ) Admit = high_imp;
    if( Admit < cero_doub ) Admit = cero_doub;
    
    
    qDebug() <<" ";
    qDebug() << QString::fromStdString(m_elmId)<<"STAGE "<<m_converged;
    qDebug() <<"m_lastGateV"<<m_lastGateV<<"          GateV"<<GateV<<"   dGateV"<<dGateV;
    qDebug() <<"m_lastAdmit"<<m_lastAdmit<<"          Admit"<<Admit;
    
    double min = 1e-3;
    if( Admit<m_lastAdmit ) min = 1e-6;

    if( fabs(Admit-m_lastAdmit)<min )
    {
        m_converged = true;
        //return;
    }
    else if( m_converged )
    {
        m_dAdmit = -1e-7;
        if( Admit>m_lastAdmit ) m_dAdmit = 1e-7;
        Admit = m_lastAdmit + m_dAdmit;
        qDebug() <<"m_dAdmit"<<m_dAdmit<<"   Admit "<<Admit ;

        m_converged = false;
    }
    else
    {
        if( m_lastGateV != GateV ) // We problably are in a close loop configuration
        {
            // Guess next converging output:
            double newAdmit = (m_lastAdmit*dGateV + GateV*0.8*1e-7)/(dGateV*2.6 );
            
            double Al = Admit-m_lastAdmit;
            double An = Admit-newAdmit;
            double nl = newAdmit-m_lastAdmit;
            
            if( fabs( Al ) > fabs( nl ) )    // LastAdmit<newAdmit>Admit
            {Admit = (newAdmit*2+Admit)/3;
                qDebug() << "    Case 1";
            }
            if( fabs( Al ) < fabs( An ) )    // newAdmit<lastAdmit<Admit
            {Admit = m_lastAdmit+Al/3;
                qDebug() << "    Case 2";
            }

            qDebug() << "    newAdmit"<<newAdmit << "   Final Admit"<<Admit;
        }
        m_converged = true;
    }
    
    if( Admit > high_imp ) Admit = high_imp;
    if( Admit < cero_doub ) Admit = cero_doub;
    if( Admit != m_lastAdmit )
    {
        m_resist = 1/Admit;
        eResistor::stamp();
    }
    
    double DScurrent = 0;
    if( (GateV>0.1)&(Vds > GateV) ) 
    {
        double Vdg = Vds-GateV+0.1;
        DScurrent = Vdg/m_resist;
        DScurrent -= DScurrent / (1 + Vdg );
        if( DScurrent < 0 )  DScurrent = 0;
    }
    if( DScurrent != m_DScurrent)
    {
        m_DScurrent = DScurrent;
        m_ePin[0]->stampCurrent( DScurrent );
        m_ePin[1]->stampCurrent(-DScurrent );
    }
    qDebug() << "m_resist"<<m_resist<< "     DScurrent"<<DScurrent;
    m_lastGateV = GateV;
    m_lastAdmit = Admit;
    m_Vs = Vs;
}
